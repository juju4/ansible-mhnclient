---

- name: MHN Client | registration
  include: registration.yml honeypot=wordpot
- set_fact:
    deploy: /root/.registration_done-wordpot

- name: Extract HPF_HOST from server_url
  shell: >
    set -o pipefail
    echo {{ server_url }} | sed 's#^http://##; s#^https://##; s#/.*$##; s/:.*$//'
  args:
    executable: /bin/bash
  register: HPF_HOST
  changed_when: False
- name: Set fact HPF_PORT
  set_fact:
    HPF_PORT: 10000
- name: retrieve HPF_IDENT from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"identifier\"]'"
  register: HPF_IDENT
  changed_when: False
- name: retrieve HPF_SECRET from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"secret\"]'"
  register: HPF_SECRET
  changed_when: False
  no_log: true

- name: Ubuntu | Install wordpot dependencies
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - git
    - supervisor
    - python-pip
    - python-virtualenv
  when: ansible_os_family == 'Debian' or ansible_distribution == 'Kali'

- name: yum | Install wordpot dependencies
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - git
    - supervisor
    - python-pip
    - python-virtualenv
  when: ansible_os_family == "RedHat"

- stat: path=/opt/wordpot
  register: wordpotdir
- name: git clone wordpot
  git:
    repo=https://github.com/threatstream/wordpot.git
    dest=/opt/wordpot
  when: not wordpotdir.stat.exists

- name: Install wordpot virtualenv
  pip: requirements=/opt/wordpot/requirements.txt
    virtualenv=/opt/wordpot/env

- name: set wordpot config
  template: src=wordpot.conf.j2 dest=/opt/wordpot/wordpot.conf mode=0644 backup=yes
  notify:
    - supervisor update

- name: MHN client | wordpot supervisor config
  copy: "src=wordpot.conf dest={{ supervisor_confdir }}/wordpot.{{ supervisor_ext }} mode=0644"
  notify:
    - supervisor update
