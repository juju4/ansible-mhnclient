---

- name: MHN Client | registration
  include: registration.yml honeypot=kippo
- set_fact:
    deploy: /root/.registration_done-kippo

- name: Extract HPF_HOST from server_url
  shell: |
    set -o pipefail
    echo {{ server_url }} | sed 's#^http://##; s#^https://##; s#/.*$##; s/:.*$//'
  args:
    executable: /bin/bash
  register: HPF_HOST
  changed_when: False
- name: Set fact HPF_PORT
  set_fact:
    HPF_PORT: 10000
- name: retrieve HPF_IDENT from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"identifier\"]'"
  register: HPF_IDENT
  changed_when: False
- name: retrieve HPF_SECRET from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"secret\"]'"
  register: HPF_SECRET
  changed_when: False
  no_log: true

- name: Ubuntu | Install kippo dependencies
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - python-dev
    - openssl
    - python-openssl
    - python-pyasn1
#    - python-twisted
    - git
    - ssh
    - python-pip
    - python-virtualenv
    - supervisor
    - authbind
    - iptables-persistent
  when: ansible_os_family == 'Debian' or ansible_distribution == 'Kali'

- name: yum | Install kippo dependencies
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - git
    - openssh-server
    - supervisor
    - python-pip
    - python-virtualenv
    - python-devel
    - openssl-devel
    - python-pyasn1
#    - python-twisted-web
    - iptables
## FIXME! rpm missing
#    - python-openssl
#    - authbind
#    - iptables-persistent
  when: ansible_os_family == "RedHat"


- name: Kippo | ensure no conflict with main ssh server = could break your config if using Vagrant
  lineinfile:
    "dest='/etc/ssh/sshd_config' regexp='^Port .*' line='Port {{ real_ssh_port }}' backup=yes"
  notify:
    - restart ssh
  when: real_ssh_port is defined and real_ssh_port != '' and real_ssh_port != 22

- name: Ensure kippo user exists
  user: name=kippo shell=/bin/bash group=users home=/home/kippo

- stat: path=/opt/kippo
  register: kippodir
- name: git clone kippo
  git:
    repo=https://github.com/threatstream/kippo
    dest=/opt/kippo
    version="{{ mhnclient_kippo_versionÂ }}"
  when: not kippodir.stat.exists

## xenial has twisted 16.0
## https://github.com/desaster/kippo/issues/202
- name: install kippo dependencies in dedicated virtualenv
  pip:
    name: "{{ item.n }}"
    version: "{{ item.v }}"
    virtualenv: "/home/kippo/env-kippo"
    virtualenv_site_packages: yes
    umask: '0022'
  with_items:
    - { n: twisted, v: 15.1.0 }
    - { n: pycrypto, v: 2.6.1 }
    - { n: pyasn1, v: 0.1.9 }
    - { n: pyopenssl, v: 17.2.0 }

- block:
    - name: Determine if IPTables forwarding is going to work
      shell: sysctl -w net.ipv4.conf.eth0.route_localnet=1 2>&1 >/dev/null
      register: sysctlout
    - set_fact:
        iptable_support: true
      changed_when: "sysctlout.rc != 0"
    - name: "Add iptables forwarding to kippo (iptables_support {{ iptables_support }})"
      template: src=rules.v4.j2 dest=/etc/iptables/rules.v4 mode=0644
      when: iptables_support is defined and iptables_support
  when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")) and mhnclient_kippo_22redirect is defined and mhnclient_kippo_22redirect
- name: create kippo configuration
  template: src=kippo.cfg.j2 dest=/opt/kippo/kippo.cfg mode=0644 backup=yes

- name: Make directory owned by kippo user
  file:
    path: /opt/kippo
    owner: kippo
    group: users
    recurse: yes

- stat: path=/etc/authbind/byport/22
  register: authbind
- file: path=/etc/authbind/byport/22 state=touch mode=0777 owner=kippo
  when: not authbind.stat.exists and mhnclient_kippo_22redirect is defined and mhnclient_kippo_22redirect

- name: create start script for kippo
  template: src=start.sh.j2 dest=/opt/kippo/start.sh mode=0755
  notify:
    - supervisor update

- name: define daemon to kippo for log cleaning script
  set_fact:
    daemon: kippo

- name: add log cleaning script
  template:
    src: cowrie-log-cleaning.sh.j2
    dest: "{{ scriptsdir }}/kippo-log-cleaning.sh"
    mode: '0755'
    backup: yes

- name: add scheduled task for kippo logs cleaning
  cron: name="kippo -log-cleaning" minute="15" hour="23"
    job="{{ scriptsdir }}/kippo-log-cleaning.sh > /tmp/kippo-log-cleaning.log 2>&1"
    user=kippo
    cron_file=ansible_kippo-log-cleaning

- name: set kippo supervisor config
  template: "src=kippo.conf.j2 dest={{ supervisor_confdir }}/kippo.{{ supervisor_ext }} mode=0644"
  notify:
    - supervisor update
