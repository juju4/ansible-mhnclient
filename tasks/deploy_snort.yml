---
- name: MHN Client | registration
  include: registration.yml honeypot=snort
- set_fact:
    deploy: /root/.registration_done-snort

- name: retrieve HPF_HOST from server_url
  shell: "echo {{ server_url }} | sed 's#^http://##; s#^https://##; s#/.*$##; s/:.*$//'"
  register: HPF_HOST
  changed_when: False
- set_fact:
    HPF_PORT: 10000
- name: retrieve HPF_IDENT from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"identifier\"]'"
  register: HPF_IDENT
  changed_when: False
- name: retrieve HPF_SECRET from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"secret\"]'"
  register: HPF_SECRET
  changed_when: False

- name: Ubuntu | Install snort dependencies
  apt: name={{item}} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - git
    - supervisor
    - build-essential
    - libpcap-dev
    - libjansson-dev
    - libpcre3-dev
    - libdnet-dev
    - libdumbnet-dev
    - libdaq-dev
    - flex
    - bison
    - python-pip
    - make
    - automake
    - libtool
    - zlib1g-dev
    - python-virtualenv
    - libev-dev
    - libev4
    - wget
    - net-tools
  when: ansible_os_family == 'Debian' or ansible_distribution == 'Kali'

- name: yum | Install snort dependencies
  yum: name={{item}} state=present update_cache=yes
  with_items:
    - git
    - supervisor
    - "@Development tools"
    - libpcap-devel
    - jansson-devel
    - pcre-devel
    - libdnet-devel
    - flex
    - bison
    - make
    - zlib-devel
    - libev
    - libev-devel
    - python-pip
    - python-virtualenv
    - wget
## FIXME! missing rpm
#    - libdumbnet-dev
#    - libdaq-dev
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- block:
    - name: recover ipaddr of snort interface for HOME_NET
      shell: "ifconfig {{ if_snort }} | awk -F'[ :]' '/inet addr/ {print $13}'"
      register: ipaddr
      changed_when: False
    - debug: var=ipaddr
    - debug: var=ipaddr.stdout
    - name: define HOME_NET from ipaddress attached to if_snort
      set_fact:
        HOME_NET: "{{ ipaddr.stdout }}"
      when: ipaddr.stdout != ''
  when: if_snort is defined and if_snort != ''
- name: define HOME_NET from ansible_default_ipv4.address
  set_fact:
    HOME_NET: "{{ ansible_default_ipv4.address }}"
  when: not (if_snort is defined and if_snort != '') or not (ipaddr is defined and ipaddr.stdout is defined and ipaddr.stdout != '') and ansible_default_ipv4 is defined

## former is needed if older release present (conpot)
## FIXME! ImportError: No module named _markerlib
#- command: "pip install --upgrade distribute"
#- pip: name=distribute state=present

- stat: path=/opt/hpfeeds
  register: githpfeeds
- name: git clone hpfeeds
  git:
    repo=https://github.com/threatstream/hpfeeds
    dest=/opt/hpfeeds
  when: not githpfeeds.stat.exists
- name: MHN client | snort - compile and install libhpfeeds
  command: "{{ item }} chdir=/opt/hpfeeds/appsupport/libhpfeeds creates=/lib/libhpfeeds.a"
  with_items:
    - autoreconf --install
    - ./configure
    - make
    - make install

- block:
    - name: download daq
      get_url: url=https://www.snort.org/downloads/snort/daq-2.0.6.tar.gz dest=/opt mode=0644 checksum='sha256:b40e1d1273e08aaeaa86e69d4f28d535b7e53bdb3898adf539266b63137be7cb'
    - name: uncompress daq
      unarchive: src=/opt/daq-2.0.6.tar.gz dest=/opt
    - name: build daq library
      command: "{{ item }} chdir=/opt/daq-2.0.6 creates=/usr/local/lib/libdaq.so"
      with_items:
        - ./configure --prefix=/usr/local
        - make
        - make install
    - name: update ldconfig path search
      lineinfile: dest=/etc/ld.so.conf.d/usr_lib.conf regexp=^/usr/lib line=/usr/lib create=yes
      notify:
        - ldconfig
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- stat: path=/opt/snortrepo
  register: gitsnort
- name: git clone hpfeeds
  git:
    repo=https://github.com/threatstream/snort.git
    dest=/opt/snortrepo
    version=hpfeeds-support
  when: not gitsnort.stat.exists
- name: build snort from threatstream
  command: "{{ item }}"
  args:
    chdir: /opt/snortrepo
    creates: /opt/snort/bin/snort"
  with_items:
    - ./configure --prefix=/opt/snort
#    - ./configure --prefix=/usr --sysconfdir=/etc/snort --localstatedir=/var/snort
    - make
    - make install
  environment:
    CPPFLAGS: -I/include
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin

- name: Ensure directories exist
  file: "path={{ item }} state=directory mode=0755"
  with_items:
#    - /etc/snort
    - /opt/snort/etc
    - /opt/snort/rules
    - /opt/snort/lib/snort_dynamicrules
    - /opt/snort/lib/snort_dynamicpreprocessor
    - /var/log/snort

- stat: path=/opt/snort/etc/snort.conf
  register: snortconf
- name: create snort config files from snort repo
  copy:
    src: "/opt/snortrepo/etc/{{ item }}"
    dest: "/opt/snort/etc/{{ item }}"
    remote_src: true
  with_items:
    - snort.conf
    - classification.config
    - reference.config
    - threshold.conf
    - unicode.map
  when: not snortconf.stat.exists
- name: MHN client | snort - validate configuration permissions
  file: "dest=/opt/snort/etc/{{ item }} mode=0644"
  with_items:
    - snort.conf
    - classification.config
    - reference.config
    - threshold.conf
    - unicode.map

- stat: path=/opt/snort/rules/white_list.rules
  register: wrules
- name: MHN client | snort - touch black/white list rules files
  file: "path=/opt/snort/rules/{{ item }} state=touch"
  with_items:
    - white_list.rules
    - black_list.rules
  when: not wrules.stat.exists

- name: MHN client | snort - base configuration
  replace:
    dest: /opt/snort/etc/snort.conf
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
    backup: yes
  with_items:
    - { regexp: '/usr/local', replace: '/opt/snort' }
    - { regexp: '^include \$RULE_PATH/(.*)', replace: '# include $RULE_PATH/\1' }
    - { regexp: '# include $RULE_PATH/local.rules', replace: 'include $RULE_PATH/local.rules' }
# next are just for config validation from any directory (not from /opt/snort/etc)
    - { regexp: '^include ([a-z].*)', replace: 'include /opt/snort/etc/\1' }
    - { regexp: ' unicode.map ', replace: ' /opt/snort/etc/unicode.map ' }
    - { regexp: ' ../rules', replace: ' /opt/snort/rules' }
  notify:
    - supervisor update

- name: MHN client | snort - HOME_NET configuration
  replace:
    dest: /opt/snort/etc/snort.conf
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
    backup: yes
    validate: "/opt/snort/bin/snort -c %s -T"
  with_items:
    - { regexp: '^ipvar HOME_NET .*', replace: "ipvar HOME_NET {{ HOME_NET | default('192.168.0.0/16') }}" }
  notify:
    - supervisor update
  when: HOME_NET is defined

- name: MHN client | snort - hpfeeds configuration
  lineinfile:
    dest: /opt/snort/etc/snort.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: "^# hpfeeds"
    validate: "/opt/snort/bin/snort -c %s -T"
  with_items:
    - { regexp: '^output log_hpfeeds', line: "output log_hpfeeds: host {{ HPF_HOST.stdout }}, ident {{ HPF_IDENT.stdout }}, secret {{ HPF_SECRET.stdout }}, channel snort.alerts, port {{ HPF_PORT }}" }
  when: HPF_SECRET is defined
  notify:
    - supervisor update

- name: map snort rules from mhn directory
  file: src=/opt/mhn/rules/mhn.rules path=/opt/snort/rules/local.rules state=link force=yes

- name: MHN client | snort - supervisor config
  template: "src=snort.conf.j2 dest={{ supervisor_confdir }}/snort.{{ supervisor_ext }} mode=0644"
  notify:
    - supervisor update

- name: add cron tasks to regularly update snort rules
  template: src=update_snort_rules.sh.j2 dest=/etc/cron.daily/update_snort_rules.sh mode=0755

## FIXME! not idempotent, way to do if file /opt/mhn/rules/mhn.rules older than 3600s ?
- name: MHN client | snort - update rules
  command: "/etc/cron.daily/update_snort_rules.sh creates=/opt/mhn/rules/mhn.rules"

