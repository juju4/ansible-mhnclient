---

- name: MHN Client | registration
  include: registration.yml honeypot=cowrie
- set_fact:
    deploy: /root/.registration_done-cowrie

- name: retrieve HPF_HOST from server_url
  shell: "echo {{ server_url }} | sed 's#^http://##; s#^https://##; s#/.*$##; s/:.*$//'"
  register: HPF_HOST
  changed_when: False
- set_fact:
    HPF_PORT: 10000
- name: retrieve HPF_IDENT from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"identifier\"]'"
  register: HPF_IDENT
  changed_when: False
- name: retrieve HPF_SECRET from registration file
  shell: "python -c 'import json;obj=json.load(file(\"{{ deploy }}\"));print obj[\"secret\"]'"
  register: HPF_SECRET
  changed_when: False

- name: Ubuntu | Install cowrie dependencies
  apt: name={{item}} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - python-dev
    - openssl
#    - python-openssl
#    - python-pyasn1
#    - python-twisted
#    - python-crypto
#    - python-gmpy2
#    - python-zope.interface
#    - python-tftpy
    - git
    - ssh
    - python-pip
    - python-virtualenv
    - supervisor
    - authbind
    - iptables-persistent
#    - python-configparser
## necessary for pip update
    - libmpfr-dev
    - libmpc-dev
  when: ansible_os_family == 'Debian' or ansible_distribution == 'Kali'


- name: yum | Install cowrie dependencies
  yum: name={{item}} state=present update_cache=yes
  with_items:
    - git
    - openssh-server
    - supervisor
    - python-pip
    - python-virtualenv
    - python-devel
    - openssl-devel
#    - python-pyasn1
#    - python-twisted-web
#    - python-crypto
#    - python-gmpy2
#    - python-zope.interface
#    - python-tftpy
    - iptables
## FIXME! rpm missing
#    - python-openssl
#    - authbind
#    - iptables-persistent
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Cowrie | ensure no conflict with main ssh server = could break your config if using Vagrant
  lineinfile:
    "dest='/etc/ssh/sshd_config' regexp='^Port 22$' line='Port {{ real_ssh_port }}'"
  notify:
    - restart ssh
  when: real_ssh_port is defined and real_ssh_port != '' and real_ssh_port != 22

- name: Ensure cowrie user exists
  user: name=cowrie shell=/bin/bash group=users home=/home/cowrie

- stat: path=/opt/cowrie
  register: cowriedir
- name: git clone cowrie
  git:
    repo=https://github.com/micheloosterhof/cowrie.git
    dest=/opt/cowrie
    version="{{ mhnclient_cowrie_version }}"
  when: not cowriedir.stat.exists

#- name: fix BUG - /opt/cowrie/env-cowrie/bin/twistd{{ ':' }} Unknown command{{ ':' }} cowrie
#  replace:
#    dest: /opt/cowrie/requirements.txt
#    regexp: '^[Tt]wisted.*'
#    replace: 'twisted==16.3.2'
#    backup: yes

- block:
    - name: create cowrie initial virtualenv to upgrade
      pip:
        name: gmpy2
        state: present
        virtualenv: /opt/cowrie/env-cowrie
    - name: fix BUG - csirtgsdk incompatible with trusty default pip, upgrade it
      command: "/opt/cowrie/env-cowrie/bin/pip2 install pip -U creates=/opt/cowrie/env-cowrie/lib/python2.7/site-packages/pip-9.0.1.dist-info/METADATA"
  when: ansible_distribution_release == 'trusty'

- name: install cowrie virtualenv
  pip:
    requirements: /opt/cowrie/requirements.txt
    virtualenv: /opt/cowrie/env-cowrie

- name: create cowrie configuration
  template: src=cowrie.cfg.j2 dest=/opt/cowrie/cowrie.cfg mode=0644 backup=yes

- name: Make directory owned by cowrie user
  file:
    path: /opt/cowrie
    owner: cowrie
    group: users
    recurse: yes

- name: Ensure cowrie sub-directories exist
  file:
    path: "/opt/cowrie/{{ item }}"
    owner: cowrie
    mode: '0755'
    state: directory
  with_items:
    - data
    - log

- name: create fake fs
  shell: "/opt/cowrie/bin/createfs > /opt/cowrie/data/fs.pickle"
  args:
    creates: /opt/cowrie/data/fs.pickle

#- name: customize accepted/denied user and passwords?
#   dest: /opt/cowrie/data/userdb.txt

- name: force cowrie virtualenv path and authbind in start script
  replace:
    dest: /opt/cowrie/bin/cowrie
    regexp: "{{ item.re }}"
    replace: "{{ item.rep }}"
    backup: yes
  with_items:
    - { re: '^AUTHBIND_ENABLED=.*', rep: 'AUTHBIND_ENABLED=yes' }
    - { re: 'activate_venv "cowrie-env"', rep: 'activate_venv "/opt/cowrie/env-cowrie"' }
    - { re: '^DAEMONIZE=".*"', rep: 'DAEMONIZE="-n"' }

- stat: path=/etc/authbind/byport/22
  register: authbind22
- file: path=/etc/authbind/byport/22 state=touch mode=0770 owner=cowrie
  when: not authbind22.stat.exists and mhnclient_cowrie_22redirect is defined and mhnclient_cowrie_22redirect
- block:
    - stat: path=/etc/authbind/byport/23
      register: authbind23
    - file: path=/etc/authbind/byport/23 state=touch mode=0770 owner=cowrie
      when: not authbind23.stat.exists
  when: mhnclient_cowrie_telnet is defined and mhnclient_cowrie_telnet

- name: define daemon to cowrie for log cleaning script
  set_fact:
    daemon: cowrie

- name: add log cleaning script
  template:
    src: cowrie-log-cleaning.sh.j2
    dest: "{{ scriptsdir }}/cowrie-log-cleaning.sh"
    mode: '0755'
    backup: yes

- name: add scheduled task for cowrie logs cleaning
  cron: name="cowrie-log-cleaning" minute="15" hour="23"
    job="{{ scriptsdir }}/cowrie-log-cleaning.sh > /tmp/cowrie-log-cleaning.log 2>&1"
    user=cowrie
    cron_file=ansible_cowrie-log-cleaning

- name: set cowrie supervisor config
  template: "src=cowrie.conf.j2 dest={{ supervisor_confdir }}/cowrie.{{ supervisor_ext }} mode=0644"
  notify:
    - supervisor update
