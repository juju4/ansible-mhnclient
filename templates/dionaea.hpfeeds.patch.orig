--- /etc/dionaea/dionaea.conf
+++ /etc/dionaea/dionaea.conf.new
@@ -252,10 +252,10 @@
 		tftp = {
 			root = "var/dionaea/wwwroot"
 		}
-		http = {
-			root = "var/dionaea/wwwroot"
-			max-request-size = "32768" // maximum size in kbytes of the request (32MB)
-		}
+		//http = {
+		//	root = "var/dionaea/wwwroot"
+		//	max-request-size = "32768" // maximum size in kbytes of the request (32MB)
+		//}
 		sip = {
 			udp = {
 				port = "5060"
@@ -350,6 +350,16 @@
 			user = "" 		// username (optional)
 			pass = ""		// password (optional)
 		}
+		hpfeeds = {
+			hp1 = {
+				server = "{{ HPF_HOST.stdout }}"
+				port = "{{ HPF_PORT }}"
+				ident = "{{ HPF_IDENT.stdout }}"
+				secret = "{{ HPF_SECRET.stdout }}"
+				// dynip_resolve: enable to lookup the sensor ip through a webservice
+				dynip_resolve = "http://queryip.net/ip/"
+			}
+		}
 		logsql = {
 			mode = "sqlite" // so far there is only sqlite
 			sqlite = {
@@ -466,6 +476,7 @@
 //			"mwserv",
 //			"submit_http",
 //			"logxmpp",
+			"hpfeeds",
 //			"nfq",
 //			"p0f",
 //			"surfids",
@@ -474,7 +485,7 @@
 		}
 
 		services = {
-			serve = ["http", "https", "tftp", "ftp", "mirror", "smb", "epmap", "sip","mssql", "mysql"]
+			serve = ["tftp", "ftp", "mirror", "smb", "epmap", "sip","mssql", "mysql"]
 		}
 
 	}

--- /usr/lib/dionaea/python/dionaea/ihandlers.py
+++ /usr/lib/dionaea/python/dionaea/ihandlers.py.new
@@ -129,6 +129,13 @@ def new():
 		import dionaea.submit_http
 		g_handlers.append(dionaea.submit_http.handler('*'))
 
+	if "hpfeeds" in g_dionaea.config()['modules']['python']['ihandlers']['handlers'] and 'hpfeeds' in g_dionaea.config()['modules']['python']:
+		import dionaea.hpfeeds
+		for client in g_dionaea.config()['modules']['python']['hpfeeds']:
+			conf = g_dionaea.config()['modules']['python']['hpfeeds'][client]
+			x = dionaea.hpfeeds.hpfeedihandler(conf)
+			g_handlers.append(x)
+
 	if "fail2ban" in g_dionaea.config()['modules']['python']['ihandlers']['handlers']:
 		import dionaea.fail2ban
 		g_handlers.append(dionaea.fail2ban.fail2banhandler())
